<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleTCP</name>
    </assembly>
    <members>
        <member name="T:Igor.TCP.ClientConnectedEventArgs">
            <summary>
            OnConnectionReceived event args.
            </summary>
        </member>
        <member name="P:Igor.TCP.ClientConnectedEventArgs.myServer">
            <summary>
            Reference to the server that accepted this connection
            </summary>
        </member>
        <member name="P:Igor.TCP.ClientConnectedEventArgs.connInfo">
            <summary>
            Basic information about client
            </summary>
        </member>
        <member name="T:Igor.TCP.ConnectionData">
            <summary>
            Holds ip address and port for connection
            </summary>
        </member>
        <member name="P:Igor.TCP.ConnectionData.ipAddress">
            <summary>
            IP address to connect to
            </summary>
        </member>
        <member name="P:Igor.TCP.ConnectionData.port">
            <summary>
            Port to which to listen
            </summary>
        </member>
        <member name="M:Igor.TCP.ConnectionData.#ctor(System.String,System.UInt16)">
            <summary>
            Initialize new ConnectionData, used for connecting to the server
            </summary>
        </member>
        <member name="T:Igor.TCP.ConnectionInfo">
            <summary>
            Basic information about connected client
            </summary>
        </member>
        <member name="P:Igor.TCP.ConnectionInfo.connectedAddress">
            <summary>
            Origin of incomming connection
            </summary>
        </member>
        <member name="P:Igor.TCP.ConnectionInfo.connectionID">
            <summary>
            Server-assigned ID for client
            </summary>
        </member>
        <member name="T:Igor.TCP.DataIDs">
            <summary>
            Class holding packet IDs and received data resoluton and unpacking
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.TCPDataID">
            <summary>
            Packet ID for TCPData structure
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.StringID">
            <summary>
            Packet ID for string
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.Int64ID">
            <summary>
            Packet ID for Int64 (long)
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.UserDefined">
            <summary>
            Packet ID for User defined packets, use this as 'packetID' for sending custom packets!
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.ServerStop">
            <summary>
            NIY, no guarantee of safety when using this TODO
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.ClientDisconnected">
            <summary>
            NIY, no guarantee of safety when using this TODO
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.RequestReceptionID">
            <summary>
            Packet ID for handling requests
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.ResponseReceptionID">
            <summary>
            Packet ID for handling responses to requests
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.PropertySyncID">
            <summary>
            Packet ID for handling property synchronization
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.CLIENT_IDENTIFICATION_COMPLEXITY">
            <summary>
            How many bytes are used to identify a client
            </summary>
        </member>
        <member name="F:Igor.TCP.DataIDs.PACKET_ID_COMPLEXITY">
            <summary>
            How many bytes are used to identify a packet
            </summary>
        </member>
        <member name="M:Igor.TCP.DataIDs.DefineCustomDataTypeForID``1(System.Byte,System.Action{``0})">
            <summary>
            Register custom packet with 'ID' that will carry data of 'TData' type, delivered via 'callback' event
            </summary>
        </member>
        <member name="M:Igor.TCP.DataIDs.RemoveCustomDefinitionForID(System.Byte)">
            <summary>
            Remove previously registered custom packet by 'ID'
            </summary>
        </member>
        <member name="T:Igor.TCP.Helper">
            <summary>
            Static class constainging useful methods for data transimission
            </summary>
        </member>
        <member name="M:Igor.TCP.Helper.GetActivePIv4Address">
            <summary>
            Returns active IPv4 Address of this computer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Igor.TCP.Helper.GetBytesFromObject``1(System.Object)">
            <summary>
            Wrapper to all object to byte[] conversions
            </summary>
        </member>
        <member name="M:Igor.TCP.Helper.GetBytesFromObject``1(System.Byte,System.Object)">
            <summary>
            Wrapper to all object to byte[] conversions, includes request ID 'customID' as first element of the array
            </summary>
        </member>
        <member name="M:Igor.TCP.Helper.ConvertToUInt64(System.Byte[])">
            <summary>
            Convert numeric value of bytes to an integer, lower index >> less important byte
            </summary>
        </member>
        <member name="T:Igor.TCP.ResponseManager">
            <summary>
            Class handing requests from the other side
            </summary>
        </member>
        <member name="M:Igor.TCP.ResponseManager.GetResponseType(System.Byte)">
            <summary>
            Get response type of custom defined packet 'ID'
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPClient.getConnection">
            <summary>
            Get connection to the server, allows client to server comunication, holds send and receiove functionality
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPClient.responseHandler">
            <summary>
            Access to datatypes for custom packets
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPClient.clientID">
            <summary>
            Get ID this client was assigned by the server
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.#ctor(System.String,System.UInt16)">
            <summary>
            Initialize new TCPClient by connecting to 'ipAddress' on port 'port'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.#ctor(Igor.TCP.ConnectionData)">
            <summary>
            Initialize new TCPClient by connecting to a server defined in 'data'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.SetListeningForData(System.Byte,System.Boolean)">
            <summary>
            Set listening for incomming data from connected client 'clientID'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.SyncPropery(System.Object,System.String,System.Byte)">
            <summary>
            Define 'propID' for synchronization of public property named 'propetyName' from instance of a class 'instance' 
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.UpdateProp(System.Byte,System.Object)">
            <summary>
            NIY, no guarantee of safety/funcionality when using this
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.DefineTwoWayComuncation``1(System.Byte,System.Func{``0})">
            <summary>
            NIY, no guarantee of safety/funcionality when using this
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.CancelTwoWayComunication(System.Byte)">
            <summary>
            NIY, no guarantee of safety when using this TODO
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.DefineRequestEntry``1(System.Byte)">
            <summary>
            Define custom request by specifying its 'TData' type with selected 'ID'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.CancelRequestID(System.Byte)">
            <summary>
            Cancel custom request of 'TData' under 'ID'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.DefineResponseEntry``1(System.Byte,System.Func{``0})">
            <summary>
            Define response 'function' to be called when request packet with 'ID' is received
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.CancelResponseID(System.Byte)">
            <summary>
            Cancel response to request with 'ID'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClient.RaiseRequestAsync(System.Byte)">
            <summary>
            Raises a new request with 'ID' and sends response via 'OnRequestHandeled' event
            </summary>
        </member>
        <member name="T:Igor.TCP.TCPClientInfo">
            <summary>
            INY
            </summary>
        </member>
        <member name="F:Igor.TCP.TCPClientInfo.isServer">
            <summary>
            Is current client playing the role of the server
            </summary>
        </member>
        <member name="F:Igor.TCP.TCPClientInfo.clientAddress">
            <summary>
            Address of current instance
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPClientInfo.#ctor(System.Boolean,System.Net.IPAddress)">
            <summary>
            Initialize new ClientInfo
            </summary>
        </member>
        <member name="T:Igor.TCP.TCPConnection">
            <summary>
            Base class for all client and server
            </summary>
        </member>
        <member name="F:Igor.TCP.TCPConnection.stream">
            <summary>
            Stream on which all transimssion happens
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPConnection.listeningForData">
            <summary>
            Is client listening for incomming data
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPConnection.debugPrints">
            <summary>
            Print debug information to console
            </summary>
        </member>
        <member name="E:Igor.TCP.TCPConnection.OnTCPDataReceived">
            <summary>
            Called when successfully received data from <see cref="F:Igor.TCP.DataIDs.TCPDataID"></see> marked packet
            </summary>
        </member>
        <member name="E:Igor.TCP.TCPConnection.OnStringReceived">
            <summary>
            Called when successfully received data from <see cref="F:Igor.TCP.DataIDs.StringID"></see> marked packet
            </summary>
        </member>
        <member name="E:Igor.TCP.TCPConnection.OnInt64Received">
            <summary>
            Called when successfully received data from <see cref="F:Igor.TCP.DataIDs.Int64ID"></see> marked packet
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPConnection.responseHandler">
            <summary>
            Access to datatypes for custom packets
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPConnection.dataIDs">
            <summary>
            Define simple data packets and get internal/externaly defined packet IDs
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.SendData(Igor.TCP.TCPData)">
            <summary>
            Send TCPData to connected device
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.SendData(System.String)">
            <summary>
            Send string to connected device
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.SendData(System.Int64)">
            <summary>
            Send Int64 (long) to connected device
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.SendData(System.Byte,System.Byte)">
            <summary>
            Send a singe byte to the connected device, used for requests
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.SendData(System.Byte,System.Byte,System.Byte[])">
            <summary>
             Sends packet with id 'packetID' and additional byte 'requestID' ad a first elemtent of inner array of 'requestID' and 'data'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.SendData(System.Byte,System.Byte[])">
            <summary>
            Main Send fuction, send byte[] of 'data' with packet ID 'packetID'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.Dispose(System.Boolean)">
            <summary>
            Dispose of the object
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPConnection.Dispose">
            <summary>
            Dispose of the object
            </summary>
        </member>
        <member name="T:Igor.TCP.TCPData">
            <summary>
            Data used for Purchse transmission
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPData.#ctor(System.Collections.Generic.List{Igor.TCP.Item},Igor.TCP.PurchaseMeta)">
            <summary>
            Get new TCPData
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPData.#ctor(Igor.TCP.Item[],Igor.TCP.PurchaseMeta)">
            <summary>
            Get new TCPData
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPData.items">
            <summary>
            Items purchased
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPData.meta">
            <summary>
            Purchase information
            </summary>
        </member>
        <member name="T:Igor.TCP.Item">
            <summary>
            Simgle Item from a shop
            </summary>
        </member>
        <member name="M:Igor.TCP.Item.#ctor(System.String,System.Int32)">
            <summary>
            Define Item
            </summary>
        </member>
        <member name="P:Igor.TCP.Item.name">
            <summary>
            Items name
            </summary>
        </member>
        <member name="P:Igor.TCP.Item.amount">
            <summary>
            How many were bought
            </summary>
        </member>
        <member name="T:Igor.TCP.ItemMeta">
            <summary>
            NIY
            </summary>
        </member>
        <member name="M:Igor.TCP.ItemMeta.#ctor(Igor.TCP.Item)">
            <summary>
            Create general Item information
            </summary>
            <param name="item"></param>
        </member>
        <member name="F:Igor.TCP.ItemMeta.item">
            <summary>
            Item this information is for
            </summary>
        </member>
        <member name="T:Igor.TCP.PurchaseMeta">
            <summary>
            Purchase information
            </summary>
        </member>
        <member name="M:Igor.TCP.PurchaseMeta.#ctor(System.DateTime,System.String,System.Int32)">
            <summary>
            Create general purchase information
            </summary>
        </member>
        <member name="P:Igor.TCP.PurchaseMeta.purchasedAt">
            <summary>
            Purchase preformed at
            </summary>
        </member>
        <member name="P:Igor.TCP.PurchaseMeta.itemsPurchased">
            <summary>
            Total items bought
            </summary>
        </member>
        <member name="P:Igor.TCP.PurchaseMeta.shopName">
            <summary>
            Shop where items were bought
            </summary>
        </member>
        <member name="T:Igor.TCP.TCPResponse">
            <summary>
            Class conatinging response data to raised request
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPResponse.#ctor(System.Byte,System.Byte[])">
            <summary>
            Create new response for 'packetID' containing 'rawData'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPResponse.#ctor(System.Byte)">
            <summary>
            Create new response for 'packetID' with no  data
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPResponse.rawData">
            <summary>
            Received bytes from the other side
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPResponse.packetID">
            <summary>
            Represents userdefined ID for data reception
            </summary>
        </member>
        <member name="T:Igor.TCP.TCPServer">
            <summary>
            TCP Server
            </summary>
        </member>
        <member name="E:Igor.TCP.TCPServer.OnConnectionEstablished">
            <summary>
            Called when client connects to this server
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.Start(System.UInt16)">
            <summary>
            Start server using specified 'port' and internally found IP
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.Start(System.String,System.UInt16)">
            <summary>
            Start server using specified 'port' and explicitly specified 'ipAddress'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.GetConnection(System.Byte)">
            <summary>
            Get client connection by ID
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.GetConnection(System.Net.IPAddress)">
            <summary>
            Get client connection by IP address
            </summary>
        </member>
        <member name="P:Igor.TCP.TCPServer.getConnectedClients">
            <summary>
            Get all connected clients
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.SetListeningForData(System.Byte,System.Boolean)">
            <summary>
            Set listening for incomming data from connected client 'clientID'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.SetIncommingClientConnection(System.Boolean)">
            <summary>
            Set listening for incomming client connection attempts
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.SyncPropery``1(System.Byte,System.Object,``0,System.Byte)">
            <summary>
            Define 'propID' for synchronization of public property for client 'clientID' named 'propetyName' from instance of a class 'instance', publish changes by calling UpdateProp()
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.UpdateProp(System.Byte,System.Byte,System.Object)">
            <summary>
            Sends updated property value to connected 'clientID' with property id 'ID' and set value;
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.DefineTwoWayComunication``1(System.Byte,System.Byte,System.Func{``0})">
            <summary>
            Shorthand for Request and response id definition, when both sides are senders 
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.CancelTwoWayComunication(System.Byte,System.Byte)">
            <summary>
            Cancel two way comunication for client 'clientID' with id 'ID'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.DefineRequestEntry``1(System.Byte,System.Byte)">
            <summary>
            Define custom request by specifying its 'TData' type with selected 'ID'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.CancelRequestID(System.Byte,System.Byte)">
            <summary>
            Cancel custom request of 'TData' under 'ID'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.DefineResponseEntry``1(System.Byte,System.Byte,System.Func{``0})">
            <summary>
            Define response 'function' to be called when request packet with 'ID' is received
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.CancelResponseID(System.Byte,System.Byte)">
            <summary>
            Cancel response to request with 'ID'
            </summary>
        </member>
        <member name="M:Igor.TCP.TCPServer.RaiseRequestAsync(System.Byte,System.Byte)">
            <summary>
            Raises a new request with 'ID' and sends response via 'OnRequestHandeled' event
            </summary>
        </member>
    </members>
</doc>
